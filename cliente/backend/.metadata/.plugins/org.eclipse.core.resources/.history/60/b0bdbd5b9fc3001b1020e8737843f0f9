package com.avaliacao.clientes.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.avaliacao.clientes.model.Email;
import com.avaliacao.clientes.model.Log;
import com.avaliacao.clientes.repository.EmailRepository;
import com.avaliacao.clientes.repository.LogRepository;

@RestController
@RequestMapping("/email")
public class EmailController {

	@Autowired
	private EmailRepository emailRepository;
	
	@Autowired
	private LogRepository logRepository;
	
	@GetMapping(value="/{id_cliente}")
	public List<Email> listar(@PathVariable("id_cliente") long idCliente) {
				
		/*Log log = new Log();
		log.setData(new Date());
		log.setOperacao("SELECT");
		log.setTabela("EMAIL");
		log.setUsuario(auth.getName());		
		logRepository.save(log);*/
		
		List<Email> r = new ArrayList<>();
		for (Email e : emailRepository.findAll()) {
			if (e.getId_cliente() == idCliente) {
				r.add(e);
			}
		}
		return r;
	}
	
	@PostMapping
	public Email adicionar(@RequestBody Email email) {
				
		/*Log log = new Log();
		log.setData(new Date());
		log.setOperacao("ADICIONA");
		log.setTabela("EMAIL");
		log.setUsuario(auth.getName());		
		logRepository.save(log);*/
		
		return emailRepository.save(email);
	}
	
	@PutMapping(value="/{id}")
	public ResponseEntity editar(@PathVariable("id") long id, @RequestBody Email email) {
				
		/*Log log = new Log();
		log.setData(new Date());
		log.setOperacao("ALTERA");
		log.setTabela("EMAIL");
		log.setUsuario(auth.getName());		
		logRepository.save(log);*/
		
		return emailRepository.findById(id)
				.map(registro -> {
					registro.setEmail(email.getEmail());
					Email atualizado = emailRepository.save(registro);
					return ResponseEntity.ok().body(atualizado);
				}).orElse(ResponseEntity.notFound().build());
	}
	
	@DeleteMapping(path ={"/{id}"})	
	public ResponseEntity <?> delete(@PathVariable long id) {
			
		/*Log log = new Log();
		log.setData(new Date());
		log.setOperacao("DELETA");
		log.setTabela("EMAIL");
		log.setUsuario(auth.getName());		
		logRepository.save(log);*/
		
	   return emailRepository.findById(id)
	           .map(record -> {
	        	   emailRepository.deleteById(id);
	               return ResponseEntity.ok().build();
	           }).orElse(ResponseEntity.notFound().build());
	} 
}
